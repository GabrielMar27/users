{"ast":null,"code":"import { routes, getRoute } from \"../routes\";\nexport const getUsers = async () => {\n  try {\n    const response = await fetch(getRoute(routes.user));\n    const content = await response.json();\n    return content;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const getUserById = async idUtilizator => {\n  try {\n    const response = await fetch(getRoute(routes.user + `/edit/${idUtilizator}`));\n    const content = await response.json();\n    return content;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const userUnique = async email => {\n  try {\n    const response = await fetch(getRoute(routes.user + `/newUser/${email}`));\n    const content = await response.json();\n    return content;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const loginDB = async utilizator => {\n  try {\n    const response = await fetch(getRoute(routes.user + `/login`), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(utilizator)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const updateUser = async utilizator => {\n  await fetch(getRoute(routes.user + `/edit/${utilizator.idUtilizator}`), {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(utilizator)\n  });\n};\nexport const addNewUser = async utilizator => {\n  await fetch(getRoute(routes.user + `/newUser`), {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(utilizator)\n  });\n};\nexport const deleteUser = async idUtilizator => {\n  await fetch(getRoute(routes.user), {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      idUtilizator\n    })\n  });\n};\n// export const updateUser = async (idUtilizator: number, users: User[]) => {\n//   const user = users.find((user) => {\n//     user.idUtilizator === idUtilizator;\n//   });\n//   await fetch(getRoute(routes.user), {\n//     method: \"PUT\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//     },\n//     body: JSON.stringify(user),\n//   });\n// };","map":{"version":3,"names":["routes","getRoute","getUsers","response","fetch","user","content","json","error","getUserById","idUtilizator","userUnique","email","loginDB","utilizator","method","headers","body","JSON","stringify","ok","Error","status","result","updateUser","addNewUser","deleteUser"],"sources":["C:/Users/Administrator/Desktop/dadadad/frontend/src/functions/dbAcctoions.js"],"sourcesContent":["import { routes, getRoute } from \"../routes\";\r\n\r\nexport const getUsers = async () => {\r\n  try {\r\n    const response = await fetch(getRoute(routes.user));\r\n    const content = await response.json();\r\n    return content;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserById = async (idUtilizator) => {\r\n  try {\r\n    const response = await fetch(\r\n      getRoute(routes.user + `/edit/${idUtilizator}`)\r\n    );\r\n    const content = await response.json();\r\n    return content;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\nexport const userUnique = async (email) => {\r\n  try {\r\n    const response = await fetch(getRoute(routes.user + `/newUser/${email}`));\r\n    const content = await response.json();\r\n    return content;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\nexport const loginDB = async (utilizator) => {\r\n  try {\r\n    const response = await fetch(getRoute(routes.user + `/login`), {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(utilizator),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUser = async (utilizator) => {\r\n  await fetch(getRoute(routes.user + `/edit/${utilizator.idUtilizator}`), {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(utilizator),\r\n  });\r\n};\r\nexport const addNewUser = async (utilizator) => {\r\n  await fetch(getRoute(routes.user + `/newUser`), {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(utilizator),\r\n  });\r\n};\r\nexport const deleteUser = async (idUtilizator) => {\r\n  await fetch(getRoute(routes.user), {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ idUtilizator }),\r\n  });\r\n};\r\n// export const updateUser = async (idUtilizator: number, users: User[]) => {\r\n//   const user = users.find((user) => {\r\n//     user.idUtilizator === idUtilizator;\r\n//   });\r\n//   await fetch(getRoute(routes.user), {\r\n//     method: \"PUT\",\r\n//     headers: {\r\n//       \"Content-Type\": \"application/json\",\r\n//     },\r\n//     body: JSON.stringify(user),\r\n//   });\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}